cubicSpline([] x) {
    [][] matrix = [4 * (x.length - 1)][4 * (x.length - 1)];
    int countPair = 0;
    for (i = 0; i < x.length; i++) {
        matrix[i][countPair] = x[I]^3;
        matrix[i][countPair + 1] = x[I]^2;
        matrix[i][countPair + 2] = x[i];
        matrix[i][countPair + 3] = 1;
        if (i != 0) {
            countPair += 4;
        }
    }
    countPair = 0;
    count = x.length;
    for (i = 1; i < x.length - 1; i++) {
        matrix[count][countPair] = x[I]^3;
        matrix[count][countPair + 1] = x[I]^2;
        matrix[count][countPair + 2] = x[i];
        matrix[count][countPair + 3] = 1;
        matrix[count][countPair + 4] = -x[I]^3;
        matrix[count][countPair + 5] = -x[I]^2;
        matrix[count][countPair + 6] = -x[i];
        matrix[count][countPair + 7] = -1;
        countPair += 4;
        count++;
    }
    countPair = 0;
    for (i = 1; i < x.length - 1; i++) {
        matrix[count][countPair] = 3 * (x[I]^2);
        matrix[count][countPair + 1] = 2 * x[i];
        matrix[count][countPair + 2] = 1;
        matrix[count][countPair + 4] = -3 * (x[I]^2);
        matrix[count][countPair + 5] = -2 * x[i];
        matrix[count][countPair + 6] = -1;
        countPair += 4;
        count++;
    }
    countPair = 0;
    for (i = 1; i < x.length - 1; i++) {
        matrix[count][countPair] = 6 * x[i];
        matrix[count][countPair + 1] = 2;
        matrix[count][countPair + 4] = -6 * x[i];
        matrix[count][countPair + 5] = -2;
        countPair += 4;
        count++;
    }
    matrix[count][0] = 6 * x[0];
    matrix[count][1] = 2;
    count++;
    matrix[count][matrix.length - 4] = 6 * x[x.length - 1];
    matrix[count][matrix.length - 3] = 2;
    return matrix;
}
